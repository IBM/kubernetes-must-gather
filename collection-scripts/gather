#!/bin/bash
# Copyright IBM Corporation. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
# Assisted by watsonx Code Assistant

PROJECT_NAME="kubernetes-must-gather"
SCRIPT_NAME="$(basename "${0}")"
VERSION="0.1.20250618002"
MGOUTPUT="must-gather"
LOGS_CRASHLOOPBACKOFF=true
VERBOSE=false
POSITIONAL_ARGS=()

echoPrefix() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S.%N %Z')] ${PROJECT_NAME} ${SCRIPT_NAME}:"
}

echoInfo() {
  echo "$(echoPrefix) ${@}" | tee -a "${MGOUTPUT}/${PROJECT_NAME}.log"
}

echoVerbose() {
  if [ "${VERBOSE}" = true ]; then
    echoInfo "${@}"
  fi
}

echoInfo "Version ${VERSION} with arguments:" "${@}"

usage() {
  printf "Usage: ${SCRIPT_NAME}\n"
  cat <<"EOF"
               --no-logs-crashloopbackoff: By default, pod logs of pods in CrashLoopBackOff
                                           state are gathered. Use this option to disable this.
               -v|--verbose: Verbose/debug output
EOF
  exit 22
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --no-logs-crashloopbackoff)
      LOGS_CRASHLOOPBACKOFF=false
      shift # past this argument
      ;;
    -v|--verbose)
      VERBOSE=true
      shift # past this argument
      ;;
    -h|--help|--usage)
      usage
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past this argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

echoInfo "Options: LOGS_CRASHLOOPBACKOFF=${LOGS_CRASHLOOPBACKOFF}, VERBOSE=${VERBOSE}"

ensureAllPodsJSON() {
  if [ "${ALL_PODS_JSON}" = "" ]; then
    ALL_PODS_JSON="$(oc get pods -A -o json)"
  fi
}

getPodLogs() {
  ns="${1}"
  pod="${2}"

  # TODO could we re-use ${ALL_PODS_JSON} for this?
  containers=$(oc get pod "$pod" -n "$ns" -o jsonpath='{.spec.containers[*].name}')

  for container in $containers; do
    echoInfo "Collecting CrashLoopBackOff pod logs for $ns/$pod [$container]"

    # The main oc adm inspect for all namespaces creates a directory structure like:
    # 
    # ├── namespaces
    # │   ├── simple
    # │   │   └── core
    # │   │       └── pods
    # │   │           ├── $POD.yaml
    #
    # However, oc adm inspect on a namespace with pod logs doesn't have the `core` folder:
    # 
    # ├── namespaces
    # │   └── simple
    # │       ├── pods
    # │       │   ├── $POD
    # │       │   │   ├── $POD.yaml
    # │       │   │   └── $CONTAINER
    # │       │   │       └── $CONTAINER
    # │       │   │           └── logs
    # │       │   │               ├── current.log
    # │       │   │               └── previous.log
    # 
    # So mimic this structure:
    OUTDIR="${MGOUTPUT}/namespaces/${ns}/pods/${pod}/${container}/${container}/logs/"
    mkdir -p "${OUTDIR}"

    # Also copy in the YAML
    oc get pod -o yaml -n "${ns}" "${pod}" > "${MGOUTPUT}/namespaces/${ns}/pods/${pod}/${pod}.yaml" &
    pids+=($!)

    echoVerbose "Sparked off oc get pod ${ns}/${pod}; PIDs = ${pids[@]}"

    oc logs --timestamps "$pod" -c "$container" -n "$ns" > "${OUTDIR}/current.log" || echo "oc logs failed for $ns/$pod/$container"
    oc logs --timestamps "$pod" -c "$container" --previous -n "$ns" > "${OUTDIR}/previous.log" || echo "oc logs --previous failed for $ns/$pod/$container"
  done
}

# Store PIDs of all the subprocesses
pids=()

# resource groups list
group_resources=(nodes pods events securitycontextconstraints)

filtered_group_resources=()
for gr in "${group_resources[@]}"
do
  oc get "$gr" > /dev/null 2>&1
  if [[ "$?" -eq 0 ]]; then
    filtered_group_resources+=("$gr")
  fi
done

group_resources_text=$(IFS=, ; echo "${filtered_group_resources[*]}")
oc adm inspect --dest-dir "${MGOUTPUT}" --rotated-pod-logs "${group_resources_text}" --all-namespaces &
pids+=($!)

echoVerbose "Sparked off main oc adm inspect; PIDs = ${pids[@]}"

if [ "${LOGS_CRASHLOOPBACKOFF}" = true ]; then
  echoInfo "Checking for CrashLoopBackOff pods"
  ensureAllPodsJSON
  INPUT="$(echo "${ALL_PODS_JSON}" | jq -r '.items[] | select(.status.containerStatuses[]?.state.waiting?.reason == "CrashLoopBackOff") | [.metadata.namespace, .metadata.name] | @tsv')"
  while IFS=$'\t' read -r ns pod; do
    getPodLogs "${ns}" "${pod}"
  done <<< "${INPUT}" # Piping into the while loop would be a subshell and would lose any variable updates (e.g. pids)
fi

# Check if PID array has any values, if so, wait for them to finish
echoVerbose "Final PIDs array: [${pids[@]}]"
if [ ${#pids[@]} -ne 0 ]; then
  echoInfo "Waiting on subprocesses to finish execution."
  wait "${pids[@]}"
fi

echoVerbose "Wait completed, peforming final sync"

# force disk flush to ensure that all data gathered is accessible in the copy container
sync

echoInfo "script finished"
